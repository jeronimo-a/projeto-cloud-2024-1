# versão padrão dos templates CloudFormation
AWSTemplateFormatVersion: "2010-09-09"

# descrição da stack, para fins de documentação
# todas as descrições estão em inglês porque o site da AWS mostra as descrições em ASCII
# consequentemente dá problema com acentos
Description: >
  This stack is a wordpress website setup with MySQL and auto-scaling.

# recursos a serem criados
Resources:

  # define a nuvem privada virtual
  ProjectVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !FindInMap [Network, VPC, Cidr]
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:                   # tags para fácil identificação
        - Key: Name
          Value: !Sub "Stack ${AWS::StackName} VPC"

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%%%%%%% CONFIGURAÇÕES DE REDE %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  # define uma subrede dentro da VPC
  ProjectSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      AvailabilityZone: us-east-1a
      CidrBlock: !FindInMap [Network, MainSubnet, Cidr]  # vem do mapping
      MapPublicIpOnLaunch: true
      Tags:                   # tags para fácil identificação
        - Key: Name
          Value: !Sub "Stack ${AWS::StackName} Main Subnet"

  # define uma subrede de redundância para a base de dados
  DatabaseRedundancySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ProjectVPC
      AvailabilityZone: us-east-1b  # availability zone diferente da sub-rede padrão
      CidrBlock: !FindInMap [Network, DatabaseRedundancySubnet, Cidr]  # vem do mapping
      MapPublicIpOnLaunch: true
      Tags:                   # tags para fácil identificação
        - Key: Name
          Value: !Sub "Stack ${AWS::StackName} Database Redundancy Subnet"

  # define o gateway de internet da VPC
  ProjectInternetGateway:
    Type: 'AWS::EC2::InternetGateway'

  # conecta o gateway de internet definido acima ao VPC
  ProjectVCPGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref ProjectVPC
      InternetGatewayId: !Ref ProjectInternetGateway

  # route table da VPC, contém regras para transmissão de dados
  ProjectRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref ProjectVPC

  # route da VPC, é uma das regras contidas na route table (a única, neste caso)
  ProjectRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref ProjectRouteTable
      DestinationCidrBlock: '0.0.0.0/0'       # libera tráfego para qualquer lugar
      GatewayId: !Ref ProjectInternetGateway

  # associa a route table criada à subnet
  ProjectSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref ProjectSubnet
      RouteTableId: !Ref ProjectRouteTable

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%%%%%%% KEY PAIR E SECURITY GROUPS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  # define o keypair de acesso às instâncias EC2
  ProjectKeyPair:
    Type: AWS::EC2::KeyPair
    Properties:
      KeyName: !Sub "${AWS::StackName}-admin-keypair"
      PublicKeyMaterial: !Ref KeyPairPublicKey
      Tags:                   # tags para fácil identificação
        - Key: Name
          Value: !Sub "Stack ${AWS::StackName} Admin Key Pair"

  # security group para acesso MySQL
  MySQLSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: MySQL server security group, enables MySQL only.
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp           # libera acesso MySQL
          FromPort: 3306
          ToPort: 3306
          CidrIp: !FindInMap [Network, VPC, Cidr] # apenas de dentro da VPC
      Tags:                                       # tags para fácil identificação
        - Key: Name
          Value: !Sub "Stack ${AWS::StackName} MySQL Security Group"

  # security group para servidores web
  WebserverSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Wordpress server security group, enables HTTP and HTTPS.
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp     # libera acesso HTTP
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp     # libera acesso HTTPS
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:                   # tags para fácil identificação
        - Key: Name
          Value: !Sub "Stack ${AWS::StackName} Webserver Security Group"

  # security group para acesso SSH
  SSHSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SSH server security group, enables SSH only.
      VpcId: !Ref ProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp     # libera acesso SSH
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:                   # tags para fácil identificação
        - Key: Name
          Value: !Sub "Stack ${AWS::StackName} SSH Security Group"

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%%%%%%% BASE DE DADOS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  # subnets das bases de dados
  ProjectDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Subnet group for Aurora MySQL"
      SubnetIds:
        - !Ref ProjectSubnet              # sub-rede padrão
        - !Ref DatabaseRedundancySubnet   # sub-rede extra em outra availability zone para redundância
      Tags:                               # tags para melhor identificação
        - Key: Name
          Value: !Sub "Stack ${AWS::StackName} Database Subnet Group"

  # base de dados MySQL
  # não usei DynamoDB porque o Wordpress não funciona de cara com DynamoDB
  # só descobri isso depois que configurei o wordpress, assim, teria que refazer um monte de coisas
  ProjectDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${AWS::StackName}-mysql-database"     # identificador da instância
      DBInstanceClass: db.t3.micro                                      # não tem como ser maior que isso
      Engine: mysql                                                     # usar o MySQL
      EngineVersion: 8.0                                                # MySQL 8.0
      MasterUsername: !FindInMap [Wordpress, Database, Username]        # usuário mestre
      MasterUserPassword: !FindInMap [Wordpress, Database, Password]    # senha do usuário mestre
      DBName: !FindInMap [Wordpress, Database, Name]                    # base de dados para o wordpress
      AllocatedStorage: 20
      BackupRetentionPeriod: 7
      PreferredBackupWindow: "07:00-09:00"
      PreferredMaintenanceWindow: "Mon:01:00-Mon:03:00"
      VPCSecurityGroups:
        - !Ref MySQLSecurityGroup                       # permite acesso MySQL somente de dentro da VPC
      DBSubnetGroupName: !Ref ProjectDBSubnetGroup      # grupo de subnets nas quais incluir a base de dados
      PubliclyAccessible: true

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%%%%%%% CRIAÇÃO DA IMAGEM WEBSERVER %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

  # função IAM para o perfil de instância EC2 que será usado para a criação da imagem
  WebserverInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  # perfil de instância que será usado para a criação da imagem
  WebserverInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref WebserverInstanceRole

  # componente da receita de criação da imagem do webserver, instala e configura o wordpress
  WebserverImageComponent:
    Type: AWS::ImageBuilder::Component
    Properties: 
      Name: !Sub "${AWS::StackName}-webserver-image-component"  # nome do componente da receita
      Version: 1.0.0                                            # versão do componente da receita
      Platform: Linux                                           # somente para linux
      Data: !Sub
            - |
              name: WordpressSetupScript - InlineData
              description: This script installs wordpress and sets up the website in the database
              schemaVersion: 1.0

              phases:
                - name: build
                  steps:
                    - name: install-dependencies
                      action: ExecuteBash
                      inputs:
                        commands:
                          - sudo apt update
                          - sudo apt install -y apache2 ghostscript libapache2-mod-php php php-bcmath php-curl php-imagick php-intl php-json php-mbstring php-mysql php-xml php-zip curl
                    - name: install-wordpress
                      action: ExecuteBash
                      inputs:
                        commands:
                          - sudo mkdir -p /srv/www
                          - "sudo chown www-data: /srv/www"
                          - curl https://wordpress.org/latest.tar.gz | sudo -u www-data tar zx -C /srv/www
                    - name: install-wordpress-cli
                      action: ExecuteBash
                      inputs:
                        commands:
                          - sudo curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
                          - sudo chmod +x wp-cli.phar
                          - sudo mv wp-cli.phar /usr/local/bin/wp
                    - name: configure-apache
                      action: ExecuteBash
                      inputs:
                        commands:
                          - sudo su
                          - |
                            echo "<VirtualHost *:80>
                                DocumentRoot /srv/www/wordpress
                                <Directory /srv/www/wordpress>
                                    Options FollowSymLinks
                                    AllowOverride Limit Options FileInfo
                                    DirectoryIndex index.php
                                    Require all granted
                                </Directory>
                                <Directory /srv/www/wordpress/wp-content>
                                    Options FollowSymLinks
                                    Require all granted
                                </Directory>
                            </VirtualHost>" > /etc/apache2/sites-available/wordpress.conf
                          - a2ensite wordpress
                          - a2enmod rewrite
                          - a2dissite 000-default
                          - service apache2 reload
                    - name: configure-database
                      action: ExecuteBash
                      inputs:
                        commands:
                          - sudo su
                          - cd /srv/www/wordpress
                          - wp config create --dbname=${DBName} --dbuser=${MasterUsername} --dbpass=${MasterUserPassword} --dbhost=${DBEndpoint} --allow-root
                          - "chown www-data: wp-config.php"
                          - 'TOKEN=`curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600"`'
                          - 'PUBLIC_DNS=`curl -H "X-aws-ec2-metadata-token: $TOKEN" -s http://169.254.169.254/latest/meta-data/public-hostname`'
                          - wp core install --url=http://$PUBLIC_DNS --title="${BlogTitle}" --admin_user="${AdminUsername}" --admin_password="${AdminUserPassword}" --admin_email="${AdminUserEMail}" --allow-root
            - DBEndpoint: !GetAtt ProjectDBInstance.Endpoint.Address
              DBName: !FindInMap [Wordpress, Database, Name]
              MasterUsername: !FindInMap [Wordpress, Database, Username]
              MasterUserPassword: !FindInMap [Wordpress, Database, Password]
              AdminUsername: !FindInMap [Wordpress, Site, Username]
              AdminUserPassword: !FindInMap [Wordpress, Site, Password]
              AdminUserEMail: !FindInMap [Wordpress, Site, EMail]
              BlogTitle: !FindInMap [Wordpress, Site, Title]


  # receita de criação da imagem do webserver, que será usada no autoscaling group
  WebserverImageRecipe:
    Type: AWS::ImageBuilder::ImageRecipe
    Properties: 
      Name: !Sub "${AWS::StackName}-webserver-image-recipe" # nome da receita da imagem
      Version: 1.0.0                                        # versão da imagem
      ParentImage: ami-04b70fa74e45c3917                    # imagem original, Ubuntu 24.04 x86-64
      Components:                                           # componentes de criação da imagem, apenas um
        - ComponentArn: !Ref WebserverImageComponent        # script de instalação e configuração do wordpress
  
  # configuração da infraestrutura de construção da imagem
  WebserverInfrastructureConfiguration:
    Type: AWS::ImageBuilder::InfrastructureConfiguration
    Properties:
      Name: !Sub "${AWS::StackName}-webserver-infrastructure-configuration"
      InstanceTypes: 
        - t2.micro
      SecurityGroupIds:
        - !Ref WebserverSecurityGroup
        - !Ref SSHSecurityGroup
      SubnetId: !Ref ProjectSubnet
      InstanceProfileName: !Ref WebserverInstanceProfile

  # configuração de distribuição da imagem
  WebserverDistributionConfiguration:
    Type: AWS::ImageBuilder::DistributionConfiguration
    Properties:
      Name: !Sub "${AWS::StackName}-webserver-distribution-configuration"
      Distributions:
        - Region: us-east-1
          AmiDistributionConfiguration:
            Name: !Sub "${AWS::StackName}-webserver-image-{{ imagebuilder:buildDate }}"
    
  # imagem do webserver
  WebserverImage:
    Type: AWS::ImageBuilder::Image
    DependsOn: ProjectDBInstance
    Properties:
      ImageRecipeArn: !Ref WebserverImageRecipe
      InfrastructureConfigurationArn: !Ref WebserverInfrastructureConfiguration
      DistributionConfigurationArn: !Ref WebserverDistributionConfiguration

  # instância de teste
  WebserverTestInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro                  # tamanho da instância
      ImageId: !GetAtt WebserverImage.ImageId # imagem do webserver configurada acima
      KeyName: !Ref ProjectKeyPair            # keypair configurado acima
      SubnetId: !Ref ProjectSubnet            # faz com que a instância use a subnet definida acima
      SecurityGroupIds:
        - !Ref WebserverSecurityGroup         # acesso HTTP e HTTPS
        - !Ref SSHSecurityGroup               # acesso SSH
      Tags:                                   # tags para fácil identificação
        - Key: Name
          Value: !Sub "Stack ${AWS::StackName} Webserver Test Instance"

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%%%%%%% PARÂMETROS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

# parâmetros de criação da stack
Parameters:

  # chave pública para acesso SSH às instâncias
  KeyPairPublicKey:
    Description: Public key for the EC2 instances' key pair.
    Type: String
    ConstraintDescription: Must be an SSH RSA public key.
    Default: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCzDZEYWYF/G7qHlgvj0OyTuX4vIn+7zoembaKryWM8wwwUxM5nfl5Ny/AqRp3IZb+Xe+vnrnBwfVSNo3igbpagF2Xq8SvGqltmroEy8J3M0xsTlAGjVGjpKv4Z13mUny+Uj2xK+Rs8mU25uFA0U44iWE+UsFAxbHtsTVyWaQxFZnjpCn0dIwPkyjJEZ2wVZJyF7P0WmSNR6yV0RQJmvBU1i/20DYQRSyc28fmeJRsQmAj5533hCEMw2d5mTG6Xr7xO68CIk1K0yoENO2VRpPfbW5f3QG6hSN1mbmUgjG1ihEPbR18ZUdaRDyPzuZxsBub0pBZSMAAr90DEJnmzegf4yPKbCFXarvMRkaLKEAUVZ5ag3syguXuuqqSLak2fYA2tB5G875PXjhSMyCZQwIWlnvnkz23R+vl0c7VFbHJnGFJNJd+DP0XRXZ5rVqZTMfOuv4rxtn7h29c9IOAyl7SRb1JCxh3snrq7joijUA7wVftR1d1D+EMCtPey4yg6mxU= jeronimo@jeronimo-hp

# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%%%%%%% VARIÁVEIS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
# %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Mappings:

  # configurações de rede
  Network:
    VPC:
      Cidr: 10.0.0.0/16         # CIDR da VPC
    MainSubnet:
      Cidr: 10.0.0.0/24         # CIDR da sub-rede principal da VPC
    DatabaseRedundancySubnet:
      Cidr: 10.0.1.0/24         # CIDR da sub-rede de redundância da base de dados
  
  # configurações do wordpress
  Wordpress:
    Database:
      Name: wordpress         # nome da base de dados do wordpress
      Username: admin         # nome do usuário mestre
      Password: senha123      # senha do usuário mestre
    Site:
      Title: Projeto de Cloud # título do site
      Username: admin         # nome do usuário admin do site
      Password: senha123      # senha do usuário admin do site
      EMail: admin@admin.com  # email do usuário admin do site
